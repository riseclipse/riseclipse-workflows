name: Build and test

# This CI workflow is trigger automatically for EVERY COMMIT or whenever a PULL REQUEST is REOPENED (open is already triggered by push)
# On PR creation, we only execute build and run tests since we don't want to release yet
# On master, the built artifacts will be used for releases 

on:
  workflow_call:
    inputs:
      build-path:
        required: true
        type: string
    secrets:
      RISECLIPSE_PGP_KEY_PRIVATE:
        required: true
      RISECLIPSE_PGP_KEY_PASSWORD:
        required: true
      RISECLIPSE_OSSRH_USERNAME:
        required: true
      RISECLIPSE_OSSRH_PASSWORD:
        required: true
      SONAR_TOKEN:
        required: true
      
jobs:
  build:
    name: Build project with Maven
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.get_version.outputs.project_version }}

    steps: 
    - name: Checkout ${{ github.event.repository.name }}
      uses: actions/checkout@v2
      with:
        path: ${{ github.event.repository.name }}
        ref: ${{ github.ref_name }}

    - name: Setup Environment
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'maven'
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.RISECLIPSE_PGP_KEY_PRIVATE }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Build with Maven 
      run: |
        cd ${{ github.event.repository.name }}/${{ inputs.build-path }}
        mvn package

    - name: Extract Maven project version
      run: |
        cd ${{ github.event.repository.name }}
        echo ::set-output name=project_version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      id: get_version

    - name: Show extracted Maven project version
      run: echo ${{ steps.get_version.outputs.project_version }}

  quality:
    name: Build Analyse code with SonarqubeProject
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v2
        with:
          path: ${{ github.event.repository.name }}
          ref: ${{ github.ref_name }}

      - name: Setup Environment
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.RISECLIPSE_PGP_KEY_PRIVATE }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Run tests with Sonarqube
        run: |
          cd ${{ github.event.repository.name }}/${{ inputs.build-path }}
          mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.organization=riseclipse\
          -Dsonar.host.url=http://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}\
          -Dsonar.projectKey=riseclipse_${{ github.event.repository.name }}

  test:
    runs-on: ubuntu-latest
    needs: [build]
    name: Run Unit Tests
    continue-on-error: true # Temporarly since we do not have unit tests for RiseClipse components

    steps: 
    - name: Run tests using maven
      run: | 
        cd ${{ github.event.repository.name }}/${{ inputs.build-path }}
        mvn test


# Unit tests to be implemented here
